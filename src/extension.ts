import * as vscode from 'vscode';
import { exec } from 'child_process';

// Set source as style50
const SOURCE = 'style50';

// Specify supported languages
const SUPPORTED_LANG = ['python'];

// Configure mapping for vscode diagnostic severity with style50-mock (e.g., pylint)
const severity = {
	'convention': vscode.DiagnosticSeverity.Information,
	'warning': vscode.DiagnosticSeverity.Warning,
	'error': vscode.DiagnosticSeverity.Error
};

export function activate(context: vscode.ExtensionContext) {
	const diagnosticCollection = vscode.languages.createDiagnosticCollection('style50');

	// Perform style checking upon saving a document
    vscode.workspace.onDidSaveTextDocument(savedDocument => {

		// Do not generate diagnostics if current file is not supported
		if (!SUPPORTED_LANG.includes(savedDocument.languageId)) {
			return;
		}
		
		// Clear all diagnostic information for the current file
		diagnosticCollection.delete(savedDocument.uri);

		// Initialize diagnostics
		const diagnostics: vscode.Diagnostic[] = [];

		// Run style50-mock for style checking, then process the result
		exec(`PATH=$PATH:/home/ubuntu/.local/bin && style50-mock ${savedDocument.uri.path}`, {"env": process.env}, (error, stdout, stderr) => {

			// We expect a JSON output format from stdout
			const check_results = JSON.parse(stdout);

			// Iterate through each result generated by style50-mock and build the diagnostic object
			for (const i in check_results) {
				const diagnostic: vscode.Diagnostic = {
					severity: severity[check_results[i]['type']],
					range: savedDocument.lineAt(check_results[i]['line'] - 1).range,
					message: check_results[i]['message'],
					source: SOURCE
				};

				// Push diagnostic object to diagnostics
				diagnostics.push(diagnostic);
			}

			// Render diagnostics for user
			diagnosticCollection.set(savedDocument.uri, diagnostics);
		});

		// Clear all diagnostics when user start editing file
		vscode.workspace.onDidChangeTextDocument(changedDocument => {
			diagnosticCollection.delete(savedDocument.uri);
		});

		// Clear all diagnostics when the file is closed
		vscode.workspace.onDidCloseTextDocument(closedDocument => {
			diagnosticCollection.delete(savedDocument.uri);
		});
	});
}